# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms for dev build

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-22.04
            c_compiler: cl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "main-output-dir=${{ github.workspace }}/build/main" >> "$GITHUB_OUTPUT"
      - name: Install development libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libasound2-dev \
            libpulse-dev
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          echo "Configuring CMake for Linux with GCC/Clang specific flags"
          cmake \
            -S src \
            -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_FLAGS="-Wno-incompatible-pointer-types" \
            -DCMAKE_CXX_FLAGS="-Wno-incompatible-pointer-types" \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
            
      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ github.workspace }}
        shell: cmd
        run: |
          echo "Configuring CMake for Windows (MSVC) with maximum speed optimizations"
          echo "Attempting to link with opengl32.lib and glu32.lib. For a permanent fix, update your CMakeLists.txt to find and link OpenGL."
          set EXTRA_LINK_FLAGS=opengl32.lib glu32.lib
          set CFLAGS=/O2 /GL /Ot /Oi /fp:fast /arch:AVX2
          set CXXFLAGS=/O2 /GL /Ot /Oi /fp:fast /arch:AVX2
          cmake -S src ^
            -B ${{ steps.strings.outputs.build-output-dir }} ^
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} ^
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} ^
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ^
            -DCMAKE_C_FLAGS="%CFLAGS%" ^
            -DCMAKE_CXX_FLAGS="%CXXFLAGS%" ^
            -DCMAKE_EXE_LINKER_FLAGS="%EXTRA_LINK_FLAGS% /LTCG" ^
            -DCMAKE_SHARED_LINKER_FLAGS="%EXTRA_LINK_FLAGS% /LTCG"

      - name: Build
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
          --config ${{ matrix.build_type }}
          --parallel
      - name: Copy icon
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          ICON_SOURCE_PATH="src/misc/logo.png"
          ICON_DEST_DIR="${{ steps.strings.outputs.main-output-dir }}/misc"
          if [ -f "$ICON_SOURCE_PATH" ]; then
            echo "Icon found at $ICON_SOURCE_PATH. Attempting to copy..."
            mkdir -p "$ICON_DEST_DIR"
            cp "$ICON_SOURCE_PATH" "$ICON_DEST_DIR/logo.png"
            echo "Icon copied to $ICON_DEST_DIR/logo.png"
          else
            echo "Warning: Icon not found at $ICON_SOURCE_PATH (expected at ${{ github.workspace }}/$ICON_SOURCE_PATH). Skipping copy."
          fi
      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} -V

      - name: Upload 'main' directory artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Main-Build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
          path: ${{ steps.strings.outputs.main-output-dir }}
          if-no-files-found: warn
          retention-days: 7
